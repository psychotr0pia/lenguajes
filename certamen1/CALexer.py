# Generated from CA.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,100,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,7,1,7,5,7,84,8,7,10,7,12,7,87,9,7,1,8,4,8,90,8,
        8,11,8,12,8,91,1,9,4,9,95,8,9,11,9,12,9,96,1,9,1,9,0,0,10,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,1,0,3,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,102,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,0,
        0,3,25,1,0,0,0,5,29,1,0,0,0,7,33,1,0,0,0,9,46,1,0,0,0,11,57,1,0,
        0,0,13,69,1,0,0,0,15,81,1,0,0,0,17,89,1,0,0,0,19,94,1,0,0,0,21,22,
        5,88,0,0,22,23,5,58,0,0,23,24,3,17,8,0,24,2,1,0,0,0,25,26,5,89,0,
        0,26,27,5,58,0,0,27,28,3,17,8,0,28,4,1,0,0,0,29,30,5,90,0,0,30,31,
        5,58,0,0,31,32,3,17,8,0,32,6,1,0,0,0,33,34,5,76,0,0,34,35,5,65,0,
        0,35,36,5,77,0,0,36,37,5,66,0,0,37,38,5,68,0,0,38,39,5,65,0,0,39,
        40,1,0,0,0,40,41,5,58,0,0,41,42,5,48,0,0,42,43,5,46,0,0,43,44,1,
        0,0,0,44,45,3,17,8,0,45,8,1,0,0,0,46,47,5,66,0,0,47,48,5,69,0,0,
        48,49,5,84,0,0,49,50,5,65,0,0,50,51,1,0,0,0,51,52,5,58,0,0,52,53,
        5,48,0,0,53,54,5,46,0,0,54,55,1,0,0,0,55,56,3,17,8,0,56,10,1,0,0,
        0,57,58,5,65,0,0,58,59,5,76,0,0,59,60,5,80,0,0,60,61,5,72,0,0,61,
        62,5,65,0,0,62,63,1,0,0,0,63,64,5,58,0,0,64,65,5,48,0,0,65,66,5,
        46,0,0,66,67,1,0,0,0,67,68,3,17,8,0,68,12,1,0,0,0,69,70,5,68,0,0,
        70,71,5,69,0,0,71,72,5,76,0,0,72,73,5,84,0,0,73,74,5,65,0,0,74,75,
        1,0,0,0,75,76,5,58,0,0,76,77,5,48,0,0,77,78,5,46,0,0,78,79,1,0,0,
        0,79,80,3,17,8,0,80,14,1,0,0,0,81,85,7,0,0,0,82,84,7,1,0,0,83,82,
        1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,16,1,0,0,0,
        87,85,1,0,0,0,88,90,2,48,57,0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,
        1,0,0,0,91,92,1,0,0,0,92,18,1,0,0,0,93,95,7,2,0,0,94,93,1,0,0,0,
        95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,98,1,0,0,0,98,99,6,
        9,0,0,99,20,1,0,0,0,4,0,85,91,96,1,6,0,0
    ]

class CALexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    X = 1
    Y = 2
    Z = 3
    LAMBDA = 4
    BETA = 5
    ALPHA = 6
    DELTA = 7
    ID = 8
    NUMBER = 9
    WS = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "X", "Y", "Z", "LAMBDA", "BETA", "ALPHA", "DELTA", "ID", "NUMBER", 
            "WS" ]

    ruleNames = [ "X", "Y", "Z", "LAMBDA", "BETA", "ALPHA", "DELTA", "ID", 
                  "NUMBER", "WS" ]

    grammarFileName = "CA.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


